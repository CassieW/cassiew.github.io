I"E+<!-- main -->
<div id="main" class="alt">

<section id="banner" class="style2">
    <div class="inner">
        <span class="image">
            <img src="/assets/images/noticeme.png" alt="" />
        </span>
        <header class="major">
            <h1>NoticeMe</h1>
        </header>
        <div class="content">
            An early notification tool for land use changes in the City of New Orleans
        </div>
    </div>
</section>

<div class="row" style="padding:5em 0em 5em 10em">
	<div class="4u 12u$(medium)" style="border-left:2px solid white">
		<h3>CLIENT</h3>
		<p>Business Owner, House Buyer, Neighborhood Organization ...</p>
	</div>
	<div class="4u 12u$(medium)" style="border-left:2px solid white">
		<h3>TYPE</h3>
		<p>Web app, Co-op Internship project</p>
	</div>
	<div class="4u$ 12u$(medium)" style="border-left:2px solid white">
		<h3>Role</h3>
		<p>Full Stack Dev</p>
	</div>
</div>

<!-- one -->
<section id="one">
	<div class="inner">
		<header class="major">
			<h2>Unexpected, yet Fruitful</h2>
		</header>
		<p>
        With the initial intent to just satisfy public service graduate requirement at Tulane, my internship with City of New Orleans turned out a fruitful learning experience beyond expectation. Without preparing for anything truly technical, I walked in Sara’s office at City Hall to discuss my upcoming internship with City of New Orleans Office of Information Technology &amp; Innovation. Serving as a Deputy Chief Information Officer for the City, Sara Estes White (Cohen) shared her ambition on the entire lifespan of technology, from K-12 STEM and computer science advocacy, digital literacy, and fostering civic engagement and innovation, to technology workforce development, implementation and management of enterprise technology systems. While I was surprised about the great enthusiasm on technology for a government institution, I pitched in with my background in computer science and experience on web development.		</p>
		<p>
        The outcome of the meeting was an exciting hands-on project – developing enhancement on user experience for NoticeMe, an early notification tool for land use changes in the City of New Orleans.
		</p>
		<span class="image fit" style="text-align:center;">
		<a href="http://noticeme.nola.gov/" target="_blank"><img src="assets/images/noticeme1.png" alt="NoticeMe Website Screenshot" /></a>
		<figcaption><a href="http://noticeme.nola.gov/" target="_blank"><i>Check it out (in production)</i></a></figcaption>
		</span>
	</div>
</section>

<!-- two -->
<section id="two">
	<div class="inner">
		<header class="major">
			<h2>UX in Map Application</h2>
		</header>
		<p>
        When it comes to a map-based application, things become a little complicated. There is a lot of data generated in everyday usage, via a targeted search, or simply clicking around to explore the area. As a user, I would like to mark Area of Interest and have them available on the view for easy access every time I log in; at the same time, saving a browsing history in certain time span would be helpful in case I forgot to mark important place down. Moreover, I would like to filter entire map based on certain criteria, like under construction or planned construction, to see my potential Area of Interest.
		</p>
		<p>
        To support these enhancements, I need a comprehensive understanding on the architecture, as well as technology used for implementation. With my mentor’s help, I started with my first task – adding the ability to toggle data display.
        </p>
<!--        <section class="spotlight">-->
<!--        <p>-->
<!--        <span class="image left">-->
<!--            <img src="assets/images/roadwork.gif" alt="Switch to see different layers." />-->
<!--        </span>-->
<!--        In ArcGIS API, a map view is built upon layers. Data points are dropped on a layer, and we can choose to show or hide it. Toggling the data display is just switching between different layers – straight forward enough. Thanks to the updated documentation, it did not take me too much time studying the API to figure out which layers to pick.-->
<!--        </p>-->
<!--        </section>-->
        <section class="spotlights">
        	<section>
        		<img src="assets/images/roadwork.gif" alt="" data-position="25% 25%" style="max-width:40%; object-fit:contain" />
        		<div class="content">
        		    <p>
                    In ArcGIS API, a map view is built upon layers. Data points are dropped on a layer, and we can choose to show or hide it. Toggling the data display is just switching between different layers – straight forward enough. Thanks to the updated documentation, it did not take me too much time studying the API to figure out which layers to pick.
        		    </p>
        		</div>
        	</section>
        </section>
        <p>
        After having a basic understanding of the layers, time for me to go a level deeper to create one and draw some lines. My second task is to highlight My Areas: In the web app, after a user logs in, we would like to display the user’s areas of interest so they can quickly compare the last week’s data to the areas for which they receive emails. This involves editing the JavaScript that drives the interface, and using ESRI’s ArcGIS JS API to display the areas.
        </p>
        <p>
        Once a batch finishes configuration and kicks off running, hundreds of configured parameters and run-time data is generated. To work this massive amount of information into an intuitive visualization without compromising the legibility, it requires us to design adaptively and inclusively on the details:
        </p>
        <div class="row 200%">
            <span class="image fit" style="text-align:center;">
                <img src="assets/images/FullScreenNPopUp.png" alt="Procedure Explorer runs full screen and pop-up" />
                <figcaption><i>Full Screen &amp; Pop-up Window</i></figcaption>
            </span>
            <div class="6u 12u(medium)">
                <span class="image fit" style="text-align:center;">
                        <img src="assets/images/themes.gif" alt="Two color theme applies adaptively to different lighting conditions" />
                        <figcaption><i>Light theme &amp; Dark Theme</i></figcaption>
                </span>
            </div>
            <div class="6u 12u$(medium)">
                <span class="image fit" style="text-align:center;">
                        <img src="assets/images/toggle.gif" alt="Toggle button to switch between description and expressions" />
                        <figcaption><i>Toggle Description &amp; Expression</i></figcaption>
                </span>
            </div>
            <span class="image fit" style="text-align:center;">
                <img src="assets/images/StepNTransition.png" alt="Customized view for each block type" />
                <figcaption><i>Step Block &amp; Transition Block</i></figcaption>
            </span>
        </div>
        <h3>Progressive Disclosure</h3>
        <blockquote>
        "Progressive disclosure defers advanced or rarely used features to a secondary screen, making applications easier to learn and less error-prone."
        </blockquote>
        <p>
        An inevitable dilemma for interaction design:
        </p>
        <ol>
            <li>
            Users want <b>power</b>, features, and enough options to handle all of their special needs. An operator would like to skip all the details and get straight to the error block, while an engineer needs some essential parameters to troubleshoot specific scenario.
            </li>
            <li>
            Users want <b>simplicity</b>; they don't have time to learn a profusion of features in enough depth to select the few that are optimal for their needs. For example, users struggle to find their target in a context menu when it lists more than 10 items, or expands more than two levels - it takes forever for one single action.
            </li>
        </ol>
        <p>
        <i>Progressive disclosure</i> is one of the best ways to satisfy both of these conflicting requirements. It's a simple, yet powerful idea:
        </p>
        <ul>
            <li>
            Initially, show users only a few of the most important options.
            </li>
            <li>
            Offer a larger set of specialized options upon request. Disclose these secondary features only if a user asks for them, meaning that most users can proceed with their tasks without worrying about this added complexity.
            </li>
        </ul>
        <p>As we introduce Procedure Explorer as a user-friendly replacement for functionalities in existing system, progressive disclosure makes the transition happens naturally: with one action users bring up a set of limited functions, they are designed intuitively leading to next level of information, while not overwhelm users with the options.
        </p>
        <div class="row">
            <div class="4u 12u$(medium)">
                <span class="image fit" style="text-align:center;">
                        <img src="assets/images/ProgresssiveDisclosure1.png" alt="Toggle button to switch between description and expressions" />
                        <figcaption><i>
                        Combining existing Chart View with Tree View, a hierarchy structure optimized for view in depth to quickly locate an element.
                        </i></figcaption>
                </span>
            </div>
            <div class="4u 12u$(medium)">
                <span class="image fit" style="text-align:center;">
                        <img src="assets/images/ProgressiveDisclosure2.gif" alt="Customized view for each block type" />
                        <figcaption><i>
                        Clicking on chart element brings up a table visualization with key parameters, which allows further interaction for in-place instruction, or accessing next level of parameters.
                        </i></figcaption>
                </span>
            </div>
            <div class="4u$ 12u$(medium)">
                <span class="image fit" style="text-align:center;">
                        <img src="assets/images/ProgressiveDisclosure3.png" alt="Toggle button to switch between description and expressions" />
                        <figcaption><i>
                        Call-out dialog gives more details on the chosen element, with access point to other views for more diagnosis information.
                        </i></figcaption>
                </span>
            </div>
        </div>
        <p>A closer look on the workflow running a batch with Procedure Explorer shows the complete three layers of progressive disclosure:</p>
        <span class="image fit" style="text-align:center;">
                <img src="assets/images/demo.gif" alt="Customized view for each block type" />
                <figcaption><i>Procedure Explorer Demo</i></figcaption>
        </span>
    </div>
</section>


</div>
:ET